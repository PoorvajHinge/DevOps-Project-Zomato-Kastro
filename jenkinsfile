pipeline {
    agent any
    tools {
        jdk 'jdk17'
        nodejs 'node23'
    }
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }
    stages {
        stage ("clean workspace") {
            steps {
                cleanWs()
            }
        }

        stage ("Git Checkout") {
            steps {
                git 'https://github.com/PoorvajHinge/DevOps-Project-Zomato-Kastro.git'
            }
        }

        stage("Sonarqube Analysis") {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=zomato \
                    -Dsonar.projectKey=zomato '''
                }
            }
        }

        stage("Code Quality Gate") {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'Sonar-token' 
                }
            } 
        }

        stage("Install NPM Dependencies") {
            steps {
                sh "npm install"
            }
        }

        stage('OWASP FS SCAN') {
            steps {
                dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit -n', odcInstallation: 'DP-Check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }

        stage ("Trivy File Scan") {
            steps {
                sh "trivy fs . > trivy.txt"
            }
        }

        stage ("Build Docker Image") {
            steps {
                sh "docker build -t zomato ."
            }
        }

        stage ("Tag & Push to DockerHub") {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker') {
                        sh "docker tag zomato bluesniffer/zomato:latest"
                        sh "docker push bluesniffer/zomato:latest"
                    }
                }
            }
        }

        stage('Docker Scout Image') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker', toolName: 'docker') {
                        //  Timeout added: will stop this stage if it runs longer than 5 minutes
                        timeout(time: 5, unit: 'MINUTES') {
                            //  Added `|| true` so if scout hangs or fails, the pipeline continues
                            sh 'docker-scout quickview bluesniffer/zomato:latest || true'
                            sh 'docker-scout cves bluesniffer/zomato:latest || true'
                            sh 'docker-scout recommendations bluesniffer/zomato:latest || true'
                        }
                    }
                }
            }
        }

        stage ("Deploy to Container") {
            steps {
                sh '''
                #  Stop and remove old container if it exists
                docker ps -a --filter "name=zomato" -q | xargs -r docker stop
                docker ps -a --filter "name=zomato" -q | xargs -r docker rm

                #  Deploy new container
                docker run -d --name zomato -p 3000:3000 bluesniffer/zomato:latest
                '''
            }
        }
    }

    post {
        always {
            emailext attachLog: true,
                subject: "'${currentBuild.result}'",
                body: """
                    <html>
                    <body>
                        <div style="background-color: #FFA07A; padding: 10px; margin-bottom: 10px;">
                            <p style="color: white; font-weight: bold;">Project: ${env.JOB_NAME}</p>
                        </div>
                        <div style="background-color: #90EE90; padding: 10px; margin-bottom: 10px;">
                            <p style="color: white; font-weight: bold;">Build Number: ${env.BUILD_NUMBER}</p>
                        </div>
                        <div style="background-color: #87CEEB; padding: 10px; margin-bottom: 10px;">
                            <p style="color: white; font-weight: bold;">URL: ${env.BUILD_URL}</p>
                        </div>
                    </body>
                    </html>
                """,
                to: 'hingepoorvaj@gmail.com',
                mimeType: 'text/html',
                attachmentsPattern: 'trivy.txt'
        }
    }
}
